Требования к проекту
1. Введение
Цель разработки – создать одностраничное веб-приложение MyPock, которое позволит пользователям сохранять сохранять понравившиеся материалы их сети и просматривать их позже.

2. Требования пользователя
2.1 Программные интерфейсы
Проект будет выполнен в формате SPA(Single page application)  при помощи технологии Angular 2(frontend)  и фреймворка Spring(backend).  
2.2 Интерфейс пользователя
При запуске приложения пользователь увидит веб-страницу, на которой будет список добавленных материалов, по которым можно перейти к их прочтению. Кнопка добавления нового материала откроет модальное окно, в котором пользователю будет предложено ввести название материала , добавить картинку, ввести теги для быстрого поиска и ввести ссылку на ресурс. После добавления нового материала он будет отображаться в списке. Пользователь может добавить ресурс в избранное, наведя курсор на поле ресурса и кликнув на «Звезду», для быстрого доступа к нему или отфильтровать материалы по тегам. 
Все материалы, помеченные как «favorite» будут отображаться на странице Favorite, перейти на которую можно выбрав в меню пункт Favorite. Пользователь может удалить ресурс из списка, нажав на иконку «trash» (иконка мусорного бака).
2.3 Характеристики пользователей
Теперь, когда вы наткнетесь на статью или ссылку, которые захотите прочитать или просмотреть позднее, просто сохраните их в MyPock.
Позднее вы сможете найти эти материалы в приложении и легко открыть их.
Данное приложение поможет вам не запоминать названия сайтов, или отправлять   ссылки на себе на почту и в социальные сети. Достаточно их просто сохранить в приложении и они будут там храниться, пока вы не удалите их.
2.4 Предположения и зависимости
Старые браузеры могут не поддерживать данное приложение.
3. Системные требования
Для запуска приложения необходим персональный компьютер с установленным одним из любых браузеров на выбор пользователя.
3.1 Функциональные требования
1) При нажатии пользователя на название ресурса или картинку(при ее наличии) перенаправить пользователя на источник.
2) при нажатии на кнопку «+» отобразить модальное окно с формой для добавления новой цели.
3) При нажатии на поле ввода в модальном окне, позволить пользователю ввести название ресурса.
4) При перетаскивании картинки в зону drag and drop, загрузить ее на облако и прикрепить к посту
5) При нажатии пользователя на поле для ввода тегов, позволить ввести их с клавиатуры и занести их в облако тегов ( избежать дублирования тегов).
6) При нажатии пользователя на кнопку «Add» добавить ресурс в список материалов пользователя.
7) При вводе пользователем текста в поле “Search” программа должна искать те задачи, в названии которых есть данные символы, а затем отобразить только то, что совпадает.
8) При выборе пользователя тега из облака тегов отобразить только те ресурсы, которые содержат данный тег.
 3.2 Нефункциональные требования
3.2.1 АТРИБУТЫ КАЧЕСТВА
1) Интуитивность и понятность интерфейса обеспечивает библиотека Angular 2 с использованием material-UI - графической библиотеки от Google. Эта библиотека даст приложению современный дизайн, а также адаптивность. К тому же благодаря этой библиотеке приложение сможет работать без перезагрузки страницы.
2) Безопасность. Так как приложение однопользовательское, его данные не сохраняются на сервере. Все личные данные пользователей сохраняются на их машинах, соответственно, данные можно заполучить только взломав непосредственно компьютер пользователя.
3) Надежность. Приложение является надежным, т.к оно однопользовательское и одностраничное. Единственная проблема — удаление сохраненных данных с локальной машины.
4) Валидация данных будет предусмотрена на этапе добавления ресурса (frontend) и на этапе добавления ресурса в базу данных (backend). Валидация предусматривает запрет пользователю на ввод путсых данных. К сожалению, проверить валидность ссылки на соответствие материалу не удасться, поэтому ответсвенность за создание ресурса с правильной ссылкой ложиться на пользователя.
